diff --git a/apps/music-player/next-env.d.ts b/apps/music-player/next-env.d.ts
index 4f11a03..fd36f94 100644
--- a/apps/music-player/next-env.d.ts
+++ b/apps/music-player/next-env.d.ts
@@ -1,5 +1,6 @@
 /// <reference types="next" />
 /// <reference types="next/image-types/global" />
+/// <reference types="next/navigation-types/compat/navigation" />
 
 // NOTE: This file should not be edited
 // see https://nextjs.org/docs/basic-features/typescript for more information.
diff --git a/apps/music-player/project.json b/apps/music-player/project.json
index 6a1fd00..0997335 100644
--- a/apps/music-player/project.json
+++ b/apps/music-player/project.json
@@ -4,6 +4,60 @@
   "sourceRoot": "apps/music-player",
   "projectType": "application",
   "tags": [],
-  "// targets": "to see all targets run: nx show project music-player --web",
-  "targets": {}
+  "targets": {
+    "build": {
+      "executor": "@nx/next:build",
+      "outputs": [
+        "{options.outputPath}"
+      ],
+      "defaultConfiguration": "production",
+      "options": {
+        "outputPath": "dist/apps/music-player"
+      },
+      "configurations": {
+        "development": {
+          "outputPath": "apps/music-player"
+        },
+        "production": {}
+      }
+    },
+    "serve": {
+      "executor": "@nx/next:server",
+      "defaultConfiguration": "development",
+      "options": {
+        "buildTarget": "music-player:build",
+        "dev": true,
+        "port": 4202
+      },
+      "configurations": {
+        "development": {
+          "buildTarget": "music-player:build:development",
+          "dev": true
+        },
+        "production": {
+          "buildTarget": "music-player:build:production",
+          "dev": false
+        }
+      }
+    },
+    "export": {
+      "executor": "@nx/next:export",
+      "options": {
+        "buildTarget": "music-player:build:production"
+      }
+    },
+    "test": {
+      "executor": "@nx/jest:jest",
+      "outputs": [
+        "{workspaceRoot}/coverage/{projectRoot}"
+      ],
+      "options": {
+        "jestConfig": "apps/music-player/jest.config.ts"
+      }
+    },
+    "lint": {
+      "executor": "@nx/eslint:lint"
+    },
+    "typecheck-spec": {}
+  }
 }
diff --git a/apps/music-player/src/app/api/hello/route.ts b/apps/music-player/src/app/api/hello/route.ts
deleted file mode 100644
index de70bac..0000000
--- a/apps/music-player/src/app/api/hello/route.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-export async function GET(request: Request) {
-  return new Response('Hello, from API!');
-}
diff --git a/apps/music-player/src/app/global.css b/apps/music-player/src/app/global.css
index 819c00c..e6af9c9 100644
--- a/apps/music-player/src/app/global.css
+++ b/apps/music-player/src/app/global.css
@@ -1,3 +1,6 @@
+@tailwind base;
+@tailwind components;
+@tailwind utilities;
 html {
   -webkit-text-size-adjust: 100%;
   font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont,
diff --git a/apps/music-player/src/app/layout.tsx b/apps/music-player/src/app/layout.tsx
index 54dd713..1dfd244 100644
--- a/apps/music-player/src/app/layout.tsx
+++ b/apps/music-player/src/app/layout.tsx
@@ -1,8 +1,11 @@
-import './global.css';
+import React from 'react';
+import Sidebar from '../components/Sidebar';
+import FooterPlayer from '../components/FooterPlayer';
+import '../styles/globals.css';
 
 export const metadata = {
-  title: 'Welcome to music-player',
-  description: 'Generated by create-nx-workspace',
+  title: 'Music Player',
+  description: 'A Next.js music player application',
 };
 
 export default function RootLayout({
@@ -12,7 +15,15 @@ export default function RootLayout({
 }) {
   return (
     <html lang="en">
-      <body>{children}</body>
+      <body className="flex h-screen bg-gray-100">
+        <Sidebar />
+        <div className="flex flex-col flex-1">
+          <main className="flex-1 overflow-y-auto">
+            {children}
+          </main>
+          <FooterPlayer />
+        </div>
+      </body>
     </html>
   );
-}
+}
\ No newline at end of file
diff --git a/apps/music-player/src/app/page.tsx b/apps/music-player/src/app/page.tsx
index b2d40dd..034b424 100644
--- a/apps/music-player/src/app/page.tsx
+++ b/apps/music-player/src/app/page.tsx
@@ -1,467 +1,43 @@
-export default function Index() {
-  /*
-   * Replace the elements below with your own.
-   *
-   * Note: The corresponding styles are in the ./index.none file.
-   */
-  return (
-    <>
-      <div className="wrapper">
-        <div className="container">
-          <div id="welcome">
-            <h1>
-              <span> Hello there, </span>
-              Welcome music-player ðŸ‘‹
-            </h1>
-          </div>
+import React from 'react';
+import Image from 'next/image';
 
-          <div id="hero" className="rounded">
-            <div className="text-container">
-              <h2>
-                <svg
-                  fill="none"
-                  stroke="currentColor"
-                  viewBox="0 0 24 24"
-                  xmlns="http://www.w3.org/2000/svg"
-                >
-                  <path
-                    strokeLinecap="round"
-                    strokeLinejoin="round"
-                    strokeWidth="2"
-                    d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"
-                  />
-                </svg>
-                <span>You&apos;re up and running</span>
-              </h2>
-              <a href="#commands"> What&apos;s next? </a>
-            </div>
-            <div className="logo-container">
-              <svg
-                fill="currentColor"
-                role="img"
-                viewBox="0 0 24 24"
-                xmlns="http://www.w3.org/2000/svg"
-              >
-                <path d="M11.987 14.138l-3.132 4.923-5.193-8.427-.012 8.822H0V4.544h3.691l5.247 8.833.005-3.998 3.044 4.759zm.601-5.761c.024-.048 0-3.784.008-3.833h-3.65c.002.059-.005 3.776-.003 3.833h3.645zm5.634 4.134a2.061 2.061 0 0 0-1.969 1.336 1.963 1.963 0 0 1 2.343-.739c.396.161.917.422 1.33.283a2.1 2.1 0 0 0-1.704-.88zm3.39 1.061c-.375-.13-.8-.277-1.109-.681-.06-.08-.116-.17-.176-.265a2.143 2.143 0 0 0-.533-.642c-.294-.216-.68-.322-1.18-.322a2.482 2.482 0 0 0-2.294 1.536 2.325 2.325 0 0 1 4.002.388.75.75 0 0 0 .836.334c.493-.105.46.36 1.203.518v-.133c-.003-.446-.246-.55-.75-.733zm2.024 1.266a.723.723 0 0 0 .347-.638c-.01-2.957-2.41-5.487-5.37-5.487a5.364 5.364 0 0 0-4.487 2.418c-.01-.026-1.522-2.39-1.538-2.418H8.943l3.463 5.423-3.379 5.32h3.54l1.54-2.366 1.568 2.366h3.541l-3.21-5.052a.7.7 0 0 1-.084-.32 2.69 2.69 0 0 1 2.69-2.691h.001c1.488 0 1.736.89 2.057 1.308.634.826 1.9.464 1.9 1.541a.707.707 0 0 0 1.066.596zm.35.133c-.173.372-.56.338-.755.639-.176.271.114.412.114.412s.337.156.538-.311c.104-.231.14-.488.103-.74z" />
-              </svg>
-            </div>
-          </div>
+// Mock data for featured albums
+const featuredAlbums = [
+  { id: 1, title: 'Album 1', artist: 'Artist 1', cover: '/placeholder-album-1.jpg' },
+  { id: 2, title: 'Album 2', artist: 'Artist 2', cover: '/placeholder-album-2.jpg' },
+  { id: 3, title: 'Album 3', artist: 'Artist 3', cover: '/placeholder-album-3.jpg' },
+  { id: 4, title: 'Album 4', artist: 'Artist 4', cover: '/placeholder-album-4.jpg' },
+];
 
-          <div id="middle-content">
-            <div id="learning-materials" className="rounded shadow">
-              <h2>Learning materials</h2>
-              <a
-                href="https://nx.dev/getting-started/intro?utm_source=nx-project"
-                target="_blank"
-                rel="noreferrer"
-                className="list-item-link"
-              >
-                <svg
-                  fill="none"
-                  stroke="currentColor"
-                  viewBox="0 0 24 24"
-                  xmlns="http://www.w3.org/2000/svg"
-                >
-                  <path
-                    strokeLinecap="round"
-                    strokeLinejoin="round"
-                    strokeWidth="2"
-                    d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
-                  />
-                </svg>
-                <span>
-                  Documentation
-                  <span> Everything is in there </span>
-                </span>
-                <svg
-                  fill="none"
-                  stroke="currentColor"
-                  viewBox="0 0 24 24"
-                  xmlns="http://www.w3.org/2000/svg"
-                >
-                  <path
-                    strokeLinecap="round"
-                    strokeLinejoin="round"
-                    strokeWidth="2"
-                    d="M9 5l7 7-7 7"
-                  />
-                </svg>
-              </a>
-              <a
-                href="https://nx.dev/blog/?utm_source=nx-project"
-                target="_blank"
-                rel="noreferrer"
-                className="list-item-link"
-              >
-                <svg
-                  fill="none"
-                  stroke="currentColor"
-                  viewBox="0 0 24 24"
-                  xmlns="http://www.w3.org/2000/svg"
-                >
-                  <path
-                    strokeLinecap="round"
-                    strokeLinejoin="round"
-                    strokeWidth="2"
-                    d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"
-                  />
-                </svg>
-                <span>
-                  Blog
-                  <span> Changelog, features & events </span>
-                </span>
-                <svg
-                  fill="none"
-                  stroke="currentColor"
-                  viewBox="0 0 24 24"
-                  xmlns="http://www.w3.org/2000/svg"
-                >
-                  <path
-                    strokeLinecap="round"
-                    strokeLinejoin="round"
-                    strokeWidth="2"
-                    d="M9 5l7 7-7 7"
-                  />
-                </svg>
-              </a>
-              <a
-                href="https://www.youtube.com/@NxDevtools/videos?utm_source=nx-project&sub_confirmation=1"
-                target="_blank"
-                rel="noreferrer"
-                className="list-item-link"
-              >
-                <svg
-                  role="img"
-                  viewBox="0 0 24 24"
-                  fill="currentColor"
-                  xmlns="http://www.w3.org/2000/svg"
-                >
-                  <title>YouTube</title>
-                  <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z" />
-                </svg>
-                <span>
-                  YouTube channel
-                  <span> Nx Show, talks & tutorials </span>
-                </span>
-                <svg
-                  fill="none"
-                  stroke="currentColor"
-                  viewBox="0 0 24 24"
-                  xmlns="http://www.w3.org/2000/svg"
-                >
-                  <path
-                    strokeLinecap="round"
-                    strokeLinejoin="round"
-                    strokeWidth="2"
-                    d="M9 5l7 7-7 7"
-                  />
-                </svg>
-              </a>
-              <a
-                href="https://nx.dev/react-tutorial/1-code-generation?utm_source=nx-project"
-                target="_blank"
-                rel="noreferrer"
-                className="list-item-link"
-              >
-                <svg
-                  fill="none"
-                  stroke="currentColor"
-                  viewBox="0 0 24 24"
-                  xmlns="http://www.w3.org/2000/svg"
-                >
-                  <path
-                    strokeLinecap="round"
-                    strokeLinejoin="round"
-                    strokeWidth="2"
-                    d="M15 15l-2 5L9 9l11 4-5 2zm0 0l5 5M7.188 2.239l.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656l-2.12 2.122"
-                  />
-                </svg>
-                <span>
-                  Interactive tutorials
-                  <span> Create an app, step-by-step </span>
-                </span>
-                <svg
-                  fill="none"
-                  stroke="currentColor"
-                  viewBox="0 0 24 24"
-                  xmlns="http://www.w3.org/2000/svg"
-                >
-                  <path
-                    strokeLinecap="round"
-                    strokeLinejoin="round"
-                    strokeWidth="2"
-                    d="M9 5l7 7-7 7"
-                  />
-                </svg>
-              </a>
-              <a
-                href="https://nxplaybook.com/?utm_source=nx-project"
-                target="_blank"
-                rel="noreferrer"
-                className="list-item-link"
-              >
-                <svg
-                  fill="none"
-                  stroke="currentColor"
-                  viewBox="0 0 24 24"
-                  xmlns="http://www.w3.org/2000/svg"
-                >
-                  <path d="M12 14l9-5-9-5-9 5 9 5z" />
-                  <path d="M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z" />
-                  <path
-                    strokeLinecap="round"
-                    strokeLinejoin="round"
-                    strokeWidth="2"
-                    d="M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222"
-                  />
-                </svg>
-                <span>
-                  Video courses
-                  <span> Nx custom courses </span>
-                </span>
-                <svg
-                  fill="none"
-                  stroke="currentColor"
-                  viewBox="0 0 24 24"
-                  xmlns="http://www.w3.org/2000/svg"
-                >
-                  <path
-                    strokeLinecap="round"
-                    strokeLinejoin="round"
-                    strokeWidth="2"
-                    d="M9 5l7 7-7 7"
-                  />
-                </svg>
-              </a>
-            </div>
-            <div id="other-links">
-              <a
-                id="nx-console"
-                className="button-pill rounded shadow"
-                href="https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console&utm_source=nx-project"
-                target="_blank"
-                rel="noreferrer"
-              >
-                <svg
-                  fill="currentColor"
-                  role="img"
-                  viewBox="0 0 24 24"
-                  xmlns="http://www.w3.org/2000/svg"
-                >
-                  <title>Visual Studio Code</title>
-                  <path d="M23.15 2.587L18.21.21a1.494 1.494 0 0 0-1.705.29l-9.46 8.63-4.12-3.128a.999.999 0 0 0-1.276.057L.327 7.261A1 1 0 0 0 .326 8.74L3.899 12 .326 15.26a1 1 0 0 0 .001 1.479L1.65 17.94a.999.999 0 0 0 1.276.057l4.12-3.128 9.46 8.63a1.492 1.492 0 0 0 1.704.29l4.942-2.377A1.5 1.5 0 0 0 24 20.06V3.939a1.5 1.5 0 0 0-.85-1.352zm-5.146 14.861L10.826 12l7.178-5.448v10.896z" />
-                </svg>
-                <span>
-                  Install Nx Console for VSCode
-                  <span>The official VSCode extension for Nx.</span>
-                </span>
-              </a>
-              <a
-                id="nx-console-jetbrains"
-                className="button-pill rounded shadow"
-                href="https://plugins.jetbrains.com/plugin/21060-nx-console"
-                target="_blank"
-                rel="noreferrer"
-              >
-                <svg
-                  height="48"
-                  width="48"
-                  viewBox="20 20 60 60"
-                  xmlns="http://www.w3.org/2000/svg"
-                >
-                  <path d="m22.5 22.5h60v60h-60z" />
-                  <g fill="#fff">
-                    <path d="m29.03 71.25h22.5v3.75h-22.5z" />
-                    <path d="m28.09 38 1.67-1.58a1.88 1.88 0 0 0 1.47.87c.64 0 1.06-.44 1.06-1.31v-5.98h2.58v6a3.48 3.48 0 0 1 -.87 2.6 3.56 3.56 0 0 1 -2.57.95 3.84 3.84 0 0 1 -3.34-1.55z" />
-                    <path d="m36 30h7.53v2.19h-5v1.44h4.49v2h-4.42v1.49h5v2.21h-7.6z" />
-                    <path d="m47.23 32.29h-2.8v-2.29h8.21v2.27h-2.81v7.1h-2.6z" />
-                    <path d="m29.13 43.08h4.42a3.53 3.53 0 0 1 2.55.83 2.09 2.09 0 0 1 .6 1.53 2.16 2.16 0 0 1 -1.44 2.09 2.27 2.27 0 0 1 1.86 2.29c0 1.61-1.31 2.59-3.55 2.59h-4.44zm5 2.89c0-.52-.42-.8-1.18-.8h-1.29v1.64h1.24c.79 0 1.25-.26 1.25-.81zm-.9 2.66h-1.57v1.73h1.62c.8 0 1.24-.31 1.24-.86 0-.5-.4-.87-1.27-.87z" />
-                    <path d="m38 43.08h4.1a4.19 4.19 0 0 1 3 1 2.93 2.93 0 0 1 .9 2.19 3 3 0 0 1 -1.93 2.89l2.24 3.27h-3l-1.88-2.84h-.87v2.84h-2.56zm4 4.5c.87 0 1.39-.43 1.39-1.11 0-.75-.54-1.12-1.4-1.12h-1.44v2.26z" />
-                    <path d="m49.59 43h2.5l4 9.44h-2.79l-.67-1.69h-3.63l-.67 1.69h-2.71zm2.27 5.73-1-2.65-1.06 2.65z" />
-                    <path d="m56.46 43.05h2.6v9.37h-2.6z" />
-                    <path d="m60.06 43.05h2.42l3.37 5v-5h2.57v9.37h-2.26l-3.53-5.14v5.14h-2.57z" />
-                    <path d="m68.86 51 1.45-1.73a4.84 4.84 0 0 0 3 1.13c.71 0 1.08-.24 1.08-.65 0-.4-.31-.6-1.59-.91-2-.46-3.53-1-3.53-2.93 0-1.74 1.37-3 3.62-3a5.89 5.89 0 0 1 3.86 1.25l-1.26 1.84a4.63 4.63 0 0 0 -2.62-.92c-.63 0-.94.25-.94.6 0 .42.32.61 1.63.91 2.14.46 3.44 1.16 3.44 2.91 0 1.91-1.51 3-3.79 3a6.58 6.58 0 0 1 -4.35-1.5z" />
-                  </g>
-                </svg>
-                <span>
-                  Install Nx Console for JetBrains
-                  <span>
-                    Available for WebStorm, Intellij IDEA Ultimate and more!
-                  </span>
-                </span>
-              </a>
-              <div id="nx-cloud" className="rounded shadow">
-                <div>
-                  <svg
-                    id="nx-cloud-logo"
-                    role="img"
-                    xmlns="http://www.w3.org/2000/svg"
-                    stroke="currentColor"
-                    fill="transparent"
-                    viewBox="0 0 24 24"
-                  >
-                    <path
-                      strokeWidth="2"
-                      d="M23 3.75V6.5c-3.036 0-5.5 2.464-5.5 5.5s-2.464 5.5-5.5 5.5-5.5 2.464-5.5 5.5H3.75C2.232 23 1 21.768 1 20.25V3.75C1 2.232 2.232 1 3.75 1h16.5C21.768 1 23 2.232 23 3.75Z"
-                    />
-                    <path
-                      strokeWidth="2"
-                      d="M23 6v14.1667C23 21.7307 21.7307 23 20.1667 23H6c0-3.128 2.53867-5.6667 5.6667-5.6667 3.128 0 5.6666-2.5386 5.6666-5.6666C17.3333 8.53867 19.872 6 23 6Z"
-                    />
-                  </svg>
-                  <h2>
-                    Nx Cloud
-                    <span>Enable faster CI & better DX</span>
-                  </h2>
-                </div>
-                <p>
-                  You can activate distributed tasks executions and caching by
-                  running:
-                </p>
-                <pre>nx connect</pre>
-                <a
-                  href="https://nx.app/?utm_source=nx-project"
-                  target="_blank"
-                  rel="noreferrer"
-                >
-                  {' '}
-                  What is Nx Cloud?{' '}
-                </a>
+export default function HomePage() {
+  return (
+    <div className="p-4">
+      <h1 className="text-2xl font-bold mb-4">Welcome to Music Player</h1>
+      
+      <section className="mb-8">
+        <h2 className="text-xl font-semibold mb-4">Featured Albums</h2>
+        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
+          {featuredAlbums.map((album) => (
+            <div key={album.id} className="bg-white p-4 rounded-lg shadow">
+              <div className="relative w-full pb-[100%] mb-2">
+                <Image
+                  src={album.cover}
+                  alt={`${album.title} cover`}
+                  fill
+                  sizes="(max-width: 768px) 50vw, 25vw"
+                  className="rounded object-cover"
+                />
               </div>
-              <a
-                id="nx-repo"
-                className="button-pill rounded shadow"
-                href="https://github.com/nrwl/nx?utm_source=nx-project"
-                target="_blank"
-                rel="noreferrer"
-              >
-                <svg
-                  fill="currentColor"
-                  role="img"
-                  viewBox="0 0 24 24"
-                  xmlns="http://www.w3.org/2000/svg"
-                >
-                  <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" />
-                </svg>
-                <span>
-                  Nx is open source
-                  <span> Love Nx? Give us a star! </span>
-                </span>
-              </a>
+              <h3 className="font-semibold">{album.title}</h3>
+              <p className="text-sm text-gray-600">{album.artist}</p>
             </div>
-          </div>
-
-          <div id="commands" className="rounded shadow">
-            <h2>Next steps</h2>
-            <p>Here are some things you can do with Nx:</p>
-            <details>
-              <summary>
-                <svg
-                  fill="none"
-                  stroke="currentColor"
-                  viewBox="0 0 24 24"
-                  xmlns="http://www.w3.org/2000/svg"
-                >
-                  <path
-                    strokeLinecap="round"
-                    strokeLinejoin="round"
-                    strokeWidth="2"
-                    d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
-                  />
-                </svg>
-                Add UI library
-              </summary>
-              <pre>
-                <span># Generate UI lib</span>
-                nx g @nx/next:library ui
-                <span># Add a component</span>
-                nx g @nx/next:component ui/src/lib/button
-              </pre>
-            </details>
-            <details>
-              <summary>
-                <svg
-                  fill="none"
-                  stroke="currentColor"
-                  viewBox="0 0 24 24"
-                  xmlns="http://www.w3.org/2000/svg"
-                >
-                  <path
-                    strokeLinecap="round"
-                    strokeLinejoin="round"
-                    strokeWidth="2"
-                    d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
-                  />
-                </svg>
-                View project details
-              </summary>
-              <pre>nx show project music-player --web</pre>
-            </details>
-            <details>
-              <summary>
-                <svg
-                  fill="none"
-                  stroke="currentColor"
-                  viewBox="0 0 24 24"
-                  xmlns="http://www.w3.org/2000/svg"
-                >
-                  <path
-                    strokeLinecap="round"
-                    strokeLinejoin="round"
-                    strokeWidth="2"
-                    d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
-                  />
-                </svg>
-                View interactive project graph
-              </summary>
-              <pre>nx graph</pre>
-            </details>
-            <details>
-              <summary>
-                <svg
-                  fill="none"
-                  stroke="currentColor"
-                  viewBox="0 0 24 24"
-                  xmlns="http://www.w3.org/2000/svg"
-                >
-                  <path
-                    strokeLinecap="round"
-                    strokeLinejoin="round"
-                    strokeWidth="2"
-                    d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
-                  />
-                </svg>
-                Run affected commands
-              </summary>
-              <pre>
-                <span># see what&apos;s been affected by changes</span>
-                nx affected:graph
-                <span># run tests for current changes</span>
-                nx affected:test
-                <span># run e2e tests for current changes</span>
-                nx affected:e2e
-              </pre>
-            </details>
-          </div>
-
-          <p id="love">
-            Carefully crafted with
-            <svg
-              fill="currentColor"
-              stroke="none"
-              viewBox="0 0 24 24"
-              xmlns="http://www.w3.org/2000/svg"
-            >
-              <path
-                strokeLinecap="round"
-                strokeLinejoin="round"
-                strokeWidth="2"
-                d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
-              />
-            </svg>
-          </p>
+          ))}
         </div>
-      </div>
-    </>
+      </section>
+      
+      <p className="text-gray-600">
+        This is a sample home page for our music player application.
+      </p>
+    </div>
   );
 }
diff --git a/apps/music-player/src/components/Layout.tsx b/apps/music-player/src/components/Layout.tsx
deleted file mode 100644
index 3e47754..0000000
--- a/apps/music-player/src/components/Layout.tsx
+++ /dev/null
@@ -1,22 +0,0 @@
-import React, { ReactNode } from 'react';
-import Sidebar from './Sidebar';
-import MainContent from './MainContent';
-import FooterPlayer from './FooterPlayer';
-
-interface LayoutProps {
-  children: ReactNode;
-}
-
-function Layout({ children }: LayoutProps) {
-  return (
-    <div className="flex h-screen bg-gray-100">
-      <Sidebar />
-      <div className="flex flex-col flex-1">
-        <MainContent>{children}</MainContent>
-        <FooterPlayer />
-      </div>
-    </div>
-  );
-}
-
-export default Layout;
\ No newline at end of file
diff --git a/apps/music-player/src/pages/_app.tsx b/apps/music-player/src/pages/_app.tsx
deleted file mode 100644
index b77b1df..0000000
--- a/apps/music-player/src/pages/_app.tsx
+++ /dev/null
@@ -1,14 +0,0 @@
-import React from 'react';
-import { AppProps } from 'next/app';
-import Layout from '../components/Layout';
-import '../styles/globals.css'; // Make sure this file exists for global styles
-
-function MyApp({ Component, pageProps }: AppProps) {
-  return (
-    <Layout>
-      <Component {...pageProps} />
-    </Layout>
-  );
-}
-
-export default MyApp;
\ No newline at end of file
diff --git a/apps/music-player/src/pages/api/playlists.spec.ts b/apps/music-player/src/pages/api/playlists.spec.ts
deleted file mode 100644
index 0f5a2e0..0000000
--- a/apps/music-player/src/pages/api/playlists.spec.ts
+++ /dev/null
@@ -1,189 +0,0 @@
-import { NextApiRequest, NextApiResponse } from 'next';
-import handler, { getPlaylistSongs, addSongToPlaylist, removeSongFromPlaylist, updatePlaylistSongOrder } from './playlists';
-import db from '../../lib/db/db';
-
-const HttpStatus = {
-  OK: 200,
-  CREATED: 201,
-  BAD_REQUEST: 400,
-  NOT_FOUND: 404,
-  METHOD_NOT_ALLOWED: 405,
-  INTERNAL_SERVER_ERROR: 500,
-} as const;
-
-jest.mock('../../lib/db/db', () => ({
-  prepare: jest.fn().mockReturnValue({
-    all: jest.fn(),
-    run: jest.fn(),
-    get: jest.fn(),
-  }),
-  transaction: jest.fn((fn) => fn),
-}));
-
-jest.mock('../../lib/auth', () => ({
-  withAuth: jest.fn((handler) => handler),
-}));
-
-describe('Playlists API', () => {
-  let mockReq: Partial<NextApiRequest>;
-  let mockRes: Partial<NextApiResponse>;
-
-  beforeEach(() => {
-    mockReq = {
-      method: 'GET',
-      query: {},
-      body: {},
-    };
-    mockRes = {
-      status: jest.fn().mockReturnThis(),
-      json: jest.fn(),
-    };
-    jest.clearAllMocks();
-  });
-
-  describe('GET /api/playlists', () => {
-    it('should return all playlists', async () => {
-      const mockPlaylists = [{ id: 1, name: 'Test Playlist' }];
-      (db.prepare('').all as jest.Mock).mockReturnValue(mockPlaylists);
-
-      await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(db.prepare).toHaveBeenCalledWith('SELECT * FROM Playlists');
-      expect(mockRes.status).toHaveBeenCalledWith(HttpStatus.OK);
-      expect(mockRes.json).toHaveBeenCalledWith(mockPlaylists);
-    });
-  });
-
-  describe('POST /api/playlists', () => {
-    it('should create a new playlist', async () => {
-      mockReq.method = 'POST';
-      mockReq.body = { name: 'New Playlist', description: 'Test description' };
-      (db.prepare('').run as jest.Mock).mockReturnValue({ lastInsertRowid: 1 });
-
-      await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(db.prepare).toHaveBeenCalledWith('INSERT INTO Playlists (name, description) VALUES (?, ?)');
-      expect(mockRes.status).toHaveBeenCalledWith(HttpStatus.CREATED);
-      expect(mockRes.json).toHaveBeenCalledWith({
-        id: 1,
-        name: 'New Playlist',
-        description: 'Test description',
-      });
-    });
-
-    it('should return 400 if playlist name is missing', async () => {
-      mockReq.method = 'POST';
-      mockReq.body = {};
-
-      await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(mockRes.status).toHaveBeenCalledWith(HttpStatus.BAD_REQUEST);
-      expect(mockRes.json).toHaveBeenCalledWith({ status: 'error', message: 'Playlist name is required' });
-    });
-  });
-
-  describe('PUT /api/playlists', () => {
-    it('should update a playlist', async () => {
-      mockReq.method = 'PUT';
-      mockReq.query = { id: '1' };
-      mockReq.body = { name: 'Updated Playlist', description: 'Updated description' };
-      (db.prepare('').run as jest.Mock).mockReturnValue({ changes: 1 });
-
-      await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(db.prepare).toHaveBeenCalledWith('UPDATE Playlists SET name = ?, description = ? WHERE id = ?');
-      expect(mockRes.status).toHaveBeenCalledWith(HttpStatus.OK);
-      expect(mockRes.json).toHaveBeenCalledWith({ message: 'Playlist updated successfully' });
-    });
-
-    it('should return 404 if playlist is not found', async () => {
-      mockReq.method = 'PUT';
-      mockReq.query = { id: '999' };
-      mockReq.body = { name: 'Updated Playlist', description: 'Updated description' };
-      (db.prepare('').run as jest.Mock).mockReturnValue({ changes: 0 });
-
-      await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(mockRes.status).toHaveBeenCalledWith(HttpStatus.NOT_FOUND);
-      expect(mockRes.json).toHaveBeenCalledWith({ status: 'error', message: 'Playlist not found' });
-    });
-  });
-
-  describe('DELETE /api/playlists', () => {
-    it('should delete a playlist', async () => {
-      mockReq.method = 'DELETE';
-      mockReq.query = { id: '1' };
-      (db.prepare('').run as jest.Mock).mockReturnValue({ changes: 1 });
-
-      await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(db.prepare).toHaveBeenCalledWith('DELETE FROM Playlists WHERE id = ?');
-      expect(mockRes.status).toHaveBeenCalledWith(HttpStatus.OK);
-      expect(mockRes.json).toHaveBeenCalledWith({ message: 'Playlist deleted successfully' });
-    });
-
-    it('should return 404 if playlist is not found', async () => {
-      mockReq.method = 'DELETE';
-      mockReq.query = { id: '999' };
-      (db.prepare('').run as jest.Mock).mockReturnValue({ changes: 0 });
-
-      await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(mockRes.status).toHaveBeenCalledWith(HttpStatus.NOT_FOUND);
-      expect(mockRes.json).toHaveBeenCalledWith({ status: 'error', message: 'Playlist not found' });
-    });
-  });
-
-  describe('GET /api/playlists/songs', () => {
-    it('should return songs for a playlist', async () => {
-      mockReq.query = { id: '1' };
-      const mockSongs = [{ id: 1, title: 'Test Song' }];
-      (db.prepare('').all as jest.Mock).mockReturnValue(mockSongs);
-
-      await getPlaylistSongs(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(db.prepare).toHaveBeenCalledWith(expect.stringContaining('SELECT s.* FROM Songs s'));
-      expect(mockRes.status).toHaveBeenCalledWith(HttpStatus.OK);
-      expect(mockRes.json).toHaveBeenCalledWith(mockSongs);
-    });
-  });
-
-  describe('POST /api/playlists/songs', () => {
-    it('should add a song to a playlist', async () => {
-      mockReq.body = { playlistId: 1, songId: 1 };
-      (db.prepare('').get as jest.Mock).mockReturnValue({ maxOrder: 2 });
-
-      await addSongToPlaylist(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(db.prepare).toHaveBeenCalledWith(expect.stringContaining('INSERT INTO PlaylistSongs'));
-      expect(mockRes.status).toHaveBeenCalledWith(HttpStatus.OK);
-      expect(mockRes.json).toHaveBeenCalledWith({ message: 'Song added to playlist successfully' });
-    });
-  });
-
-  describe('DELETE /api/playlists/songs', () => {
-    it('should remove a song from a playlist', async () => {
-      mockReq.body = { playlistId: 1, songId: 1 };
-      (db.prepare('').run as jest.Mock).mockReturnValue({ changes: 1 });
-
-      await removeSongFromPlaylist(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(db.prepare).toHaveBeenCalledWith('DELETE FROM PlaylistSongs WHERE playlist_id = ? AND song_id = ?');
-      expect(mockRes.status).toHaveBeenCalledWith(HttpStatus.OK);
-      expect(mockRes.json).toHaveBeenCalledWith({ message: 'Song removed from playlist successfully' });
-    });
-  });
-
-  describe('PUT /api/playlists/songs/order', () => {
-    it('should update the order of songs in a playlist', async () => {
-      mockReq.body = { playlistId: 1, songOrder: [3, 1, 2] };
-
-      await updatePlaylistSongOrder(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(db.prepare).toHaveBeenCalledWith('UPDATE PlaylistSongs SET "order" = ? WHERE playlist_id = ? AND song_id = ?');
-      expect(db.transaction).toHaveBeenCalled();
-      expect(mockRes.status).toHaveBeenCalledWith(HttpStatus.OK);
-      expect(mockRes.json).toHaveBeenCalledWith({ message: 'Playlist song order updated successfully' });
-    });
-  });
-});
\ No newline at end of file
diff --git a/apps/music-player/src/pages/api/playlists.ts b/apps/music-player/src/pages/api/playlists.ts
deleted file mode 100644
index 7812d49..0000000
--- a/apps/music-player/src/pages/api/playlists.ts
+++ /dev/null
@@ -1,165 +0,0 @@
-import { NextApiRequest, NextApiResponse } from 'next';
-import db from '../../lib/db/db';
-import { withAuth } from '../../lib/auth';
-import { asyncHandler, AppError, logInfo, logError } from '../../lib/errorHandler';
-
-const handler = asyncHandler(async (req: NextApiRequest, res: NextApiResponse) => {
-  switch (req.method) {
-    case 'GET':
-      return getPlaylists(req, res);
-    case 'POST':
-      return createPlaylist(req, res);
-    case 'PUT':
-      return updatePlaylist(req, res);
-    case 'DELETE':
-      return deletePlaylist(req, res);
-    default:
-      logError('Method not allowed', { method: req.method });
-      throw new AppError('Method not allowed', 405);
-  }
-});
-
-const getPlaylists = asyncHandler(async (req: NextApiRequest, res: NextApiResponse) => {
-  const playlists = db.prepare('SELECT * FROM Playlists').all();
-  logInfo('Retrieved all playlists', { count: playlists.length });
-  res.status(200).json(playlists);
-});
-
-const createPlaylist = asyncHandler(async (req: NextApiRequest, res: NextApiResponse) => {
-  const { name, description } = req.body;
-
-  if (!name) {
-    logError('Playlist creation failed', { reason: 'Missing name' });
-    throw new AppError('Playlist name is required', 400);
-  }
-
-  const result = db.prepare('INSERT INTO Playlists (name, description) VALUES (?, ?)').run(name, description);
-
-  logInfo('Playlist created', { id: result.lastInsertRowid, name });
-  res.status(201).json({
-    id: result.lastInsertRowid,
-    name,
-    description,
-  });
-});
-
-const updatePlaylist = asyncHandler(async (req: NextApiRequest, res: NextApiResponse) => {
-  const { id } = req.query;
-  const { name, description } = req.body;
-
-  if (!id || typeof id !== 'string') {
-    logError('Playlist update failed', { reason: 'Invalid ID', id });
-    throw new AppError('Invalid playlist ID', 400);
-  }
-
-  if (!name) {
-    logError('Playlist update failed', { reason: 'Missing name', id });
-    throw new AppError('Playlist name is required', 400);
-  }
-
-  const result = db.prepare('UPDATE Playlists SET name = ?, description = ? WHERE id = ?').run(name, description, id);
-
-  if (result.changes === 0) {
-    logError('Playlist update failed', { reason: 'Playlist not found', id });
-    throw new AppError('Playlist not found', 404);
-  }
-
-  logInfo('Playlist updated', { id, name });
-  res.status(200).json({ message: 'Playlist updated successfully' });
-});
-
-const deletePlaylist = asyncHandler(async (req: NextApiRequest, res: NextApiResponse) => {
-  const { id } = req.query;
-
-  if (!id || typeof id !== 'string') {
-    logError('Playlist deletion failed', { reason: 'Invalid ID', id });
-    throw new AppError('Invalid playlist ID', 400);
-  }
-
-  const result = db.prepare('DELETE FROM Playlists WHERE id = ?').run(id);
-
-  if (result.changes === 0) {
-    logError('Playlist deletion failed', { reason: 'Playlist not found', id });
-    throw new AppError('Playlist not found', 404);
-  }
-
-  logInfo('Playlist deleted', { id });
-  res.status(200).json({ message: 'Playlist deleted successfully' });
-});
-
-export const getPlaylistSongs = asyncHandler(async (req: NextApiRequest, res: NextApiResponse) => {
-  const { id } = req.query;
-
-  if (!id || typeof id !== 'string') {
-    logError('Get playlist songs failed', { reason: 'Invalid ID', id });
-    throw new AppError('Invalid playlist ID', 400);
-  }
-
-  const songs = db.prepare(`
-    SELECT s.* FROM Songs s
-    JOIN PlaylistSongs ps ON s.id = ps.song_id
-    WHERE ps.playlist_id = ?
-    ORDER BY ps.order
-  `).all(id);
-
-  logInfo('Retrieved playlist songs', { playlistId: id, songCount: songs.length });
-  res.status(200).json(songs);
-});
-
-export const addSongToPlaylist = asyncHandler(async (req: NextApiRequest, res: NextApiResponse) => {
-  const { playlistId, songId } = req.body;
-
-  if (!playlistId || !songId) {
-    logError('Add song to playlist failed', { reason: 'Missing IDs', playlistId, songId });
-    throw new AppError('Playlist ID and Song ID are required', 400);
-  }
-
-  const maxOrderResult = db.prepare('SELECT MAX("order") as maxOrder FROM PlaylistSongs WHERE playlist_id = ?').get(playlistId) as { maxOrder: number | null };
-  const newOrder = (maxOrderResult.maxOrder ?? 0) + 1;
-
-  db.prepare('INSERT INTO PlaylistSongs (playlist_id, song_id, "order") VALUES (?, ?, ?)').run(playlistId, songId, newOrder);
-
-  logInfo('Song added to playlist', { playlistId, songId, order: newOrder });
-  res.status(200).json({ message: 'Song added to playlist successfully' });
-});
-
-export const removeSongFromPlaylist = asyncHandler(async (req: NextApiRequest, res: NextApiResponse) => {
-  const { playlistId, songId } = req.body;
-
-  if (!playlistId || !songId) {
-    logError('Remove song from playlist failed', { reason: 'Missing IDs', playlistId, songId });
-    throw new AppError('Playlist ID and Song ID are required', 400);
-  }
-
-  const result = db.prepare('DELETE FROM PlaylistSongs WHERE playlist_id = ? AND song_id = ?').run(playlistId, songId);
-
-  if (result.changes === 0) {
-    logError('Remove song from playlist failed', { reason: 'Song not found in playlist', playlistId, songId });
-    throw new AppError('Song not found in playlist', 404);
-  }
-
-  logInfo('Song removed from playlist', { playlistId, songId });
-  res.status(200).json({ message: 'Song removed from playlist successfully' });
-});
-
-export const updatePlaylistSongOrder = asyncHandler(async (req: NextApiRequest, res: NextApiResponse) => {
-  const { playlistId, songOrder } = req.body;
-
-  if (!playlistId || !songOrder || !Array.isArray(songOrder)) {
-    logError('Update playlist song order failed', { reason: 'Invalid input', playlistId, songOrder });
-    throw new AppError('Invalid input', 400);
-  }
-
-  const updateStmt = db.prepare('UPDATE PlaylistSongs SET "order" = ? WHERE playlist_id = ? AND song_id = ?');
-
-  db.transaction(() => {
-    songOrder.forEach((songId, index) => {
-      updateStmt.run(index + 1, playlistId, songId);
-    });
-  })();
-
-  logInfo('Playlist song order updated', { playlistId, songCount: songOrder.length });
-  res.status(200).json({ message: 'Playlist song order updated successfully' });
-});
-
-export default withAuth(handler);
\ No newline at end of file
diff --git a/apps/music-player/src/pages/api/search.spec.ts b/apps/music-player/src/pages/api/search.spec.ts
deleted file mode 100644
index ad96cd7..0000000
--- a/apps/music-player/src/pages/api/search.spec.ts
+++ /dev/null
@@ -1,90 +0,0 @@
-import { NextApiRequest, NextApiResponse } from 'next';
-import handler from './search';
-import db from '../../lib/db/db';
-
-const HttpStatus = {
-  OK: 200,
-  BAD_REQUEST: 400,
-  METHOD_NOT_ALLOWED: 405,
-  INTERNAL_SERVER_ERROR: 500,
-} as const;
-
-jest.mock('../../lib/db/db', () => ({
-  prepare: jest.fn().mockReturnValue({
-    all: jest.fn(),
-  }),
-}));
-
-jest.mock('../../lib/auth', () => ({
-  withAuth: jest.fn((handler) => handler),
-}));
-
-describe('Search API', () => {
-  let mockReq: Partial<NextApiRequest>;
-  let mockRes: Partial<NextApiResponse>;
-  let consoleErrorSpy: jest.SpyInstance;
-
-  beforeEach(() => {
-    mockReq = {
-      method: 'GET',
-      query: {},
-    };
-    mockRes = {
-      status: jest.fn().mockReturnThis(),
-      json: jest.fn(),
-    };
-    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {
-      // Do nothing, we're just preventing console.error from cluttering the test output
-    });
-    jest.clearAllMocks();
-  });
-
-  afterEach(() => {
-    consoleErrorSpy.mockRestore();
-  });
-
-  it('should return 405 for non-GET requests', async () => {
-    mockReq.method = 'POST';
-    await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-    expect(mockRes.status).toHaveBeenCalledWith(HttpStatus.METHOD_NOT_ALLOWED);
-    expect(mockRes.json).toHaveBeenCalledWith({ status: 'error', message: 'Method not allowed' });
-  });
-
-  it('should return 400 if search query is missing', async () => {
-    await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-    expect(mockRes.status).toHaveBeenCalledWith(HttpStatus.BAD_REQUEST);
-    expect(mockRes.json).toHaveBeenCalledWith({ status: 'error', message: 'Search query is required' });
-  });
-
-  it('should return search results for songs and playlists', async () => {
-    mockReq.query = { q: 'test' };
-    const mockSongs = [{ id: 1, title: 'Test Song' }];
-    const mockPlaylists = [{ id: 1, name: 'Test Playlist' }];
-
-    const mockPrepare = jest.fn().mockReturnValue({
-      all: jest.fn()
-        .mockReturnValueOnce(mockSongs)
-        .mockReturnValueOnce(mockPlaylists),
-    });
-    (db.prepare as jest.Mock).mockImplementation(mockPrepare);
-
-    await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-    expect(db.prepare).toHaveBeenCalledTimes(2);
-    expect(mockRes.status).toHaveBeenCalledWith(HttpStatus.OK);
-    expect(mockRes.json).toHaveBeenCalledWith({ songs: mockSongs, playlists: mockPlaylists });
-  });
-
-  it('should handle database errors', async () => {
-    mockReq.query = { q: 'test' };
-    (db.prepare as jest.Mock).mockImplementation(() => {
-      throw new Error('Database error');
-    });
-
-    await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-    expect(consoleErrorSpy).toHaveBeenCalledWith('Unexpected error:', expect.any(Error));
-    expect(mockRes.status).toHaveBeenCalledWith(HttpStatus.INTERNAL_SERVER_ERROR);
-    expect(mockRes.json).toHaveBeenCalledWith({ status: 'error', message: 'An unexpected error occurred' });
-  });
-});
\ No newline at end of file
diff --git a/apps/music-player/src/pages/api/search.ts b/apps/music-player/src/pages/api/search.ts
deleted file mode 100644
index ffb0e95..0000000
--- a/apps/music-player/src/pages/api/search.ts
+++ /dev/null
@@ -1,40 +0,0 @@
-import { NextApiRequest, NextApiResponse } from 'next';
-import db from '../../lib/db/db';
-import { withAuth } from '../../lib/auth';
-import { asyncHandler, AppError, logInfo, logError } from '../../lib/errorHandler';
-
-const handler = asyncHandler(async (req: NextApiRequest, res: NextApiResponse) => {
-  if (req.method !== 'GET') {
-    logError('Invalid method for search', { method: req.method });
-    throw new AppError('Method not allowed', 405);
-  }
-
-  const { q } = req.query;
-
-  if (!q || typeof q !== 'string') {
-    logError('Invalid search query', { query: q });
-    throw new AppError('Search query is required', 400);
-  }
-
-  logInfo('Performing search', { query: q });
-
-  const songs = db.prepare(`
-    SELECT * FROM Songs
-    WHERE title LIKE ? OR artist LIKE ? OR album LIKE ?
-  `).all(`%${q}%`, `%${q}%`, `%${q}%`);
-
-  const playlists = db.prepare(`
-    SELECT * FROM Playlists
-    WHERE name LIKE ?
-  `).all(`%${q}%`);
-
-  logInfo('Search completed', { 
-    query: q, 
-    songsFound: songs.length, 
-    playlistsFound: playlists.length 
-  });
-
-  res.status(200).json({ songs, playlists });
-});
-
-export default withAuth(handler);
\ No newline at end of file
diff --git a/apps/music-player/src/pages/api/songs.spec.ts b/apps/music-player/src/pages/api/songs.spec.ts
deleted file mode 100644
index a19e701..0000000
--- a/apps/music-player/src/pages/api/songs.spec.ts
+++ /dev/null
@@ -1,222 +0,0 @@
-import { NextApiRequest, NextApiResponse } from 'next';
-import handler from './songs';
-import db from '../../lib/db/db';
-import busboy from 'busboy';
-
-const HttpStatus = {
-  OK: 200,
-  CREATED: 201,
-  BAD_REQUEST: 400,
-  NOT_FOUND: 404,
-  METHOD_NOT_ALLOWED: 405,
-  INTERNAL_SERVER_ERROR: 500,
-} as const;
-
-jest.mock('../../lib/db/db', () => ({
-  prepare: jest.fn().mockReturnValue({
-    all: jest.fn(),
-    run: jest.fn(),
-    get: jest.fn(),
-  }),
-}));
-
-jest.mock('fs', () => ({
-  createWriteStream: jest.fn(() => {
-    const { PassThrough} = jest.requireActual('stream');
-    const pass = new PassThrough();
-    // Spy on methods if needed
-    pass.on = jest.fn(pass.on.bind(pass));
-    pass.once = jest.fn(pass.once.bind(pass));
-    pass.emit = pass.emit.bind(pass);
-    pass.end = jest.fn(pass.end.bind(pass));
-    return pass;
-  }),
-  promises: {
-    unlink: jest.fn().mockResolvedValue(undefined),
-  },
-}));
-
-jest.mock('path', () => ({
-  join: jest.fn().mockReturnValue('/mocked/path'),
-  basename: jest.fn().mockReturnValue('mocked-filename'),
-}));
-
-jest.mock('../../lib/auth', () => ({
-  withAuth: jest.fn((handler) => handler),
-}));
-
-interface MockBusboyEvents {
-  file: (fieldname: string, file: PassThrough, info: busboy.FileInfo) => void;
-  field: (name: string, val: string, info: busboy.FieldInfo) => void;
-  finish: () => void;
-  close: () => void; // Add 'close' event
-}
-
-const createMockBusboy = () => {
-  const callbacks: Partial<{ [K in keyof MockBusboyEvents]: MockBusboyEvents[K][] }> = {};
-  const busboyInstance = {
-    on: <K extends keyof MockBusboyEvents>(event: K, callback: MockBusboyEvents[K]) => {
-      if (!callbacks[event]) {
-        callbacks[event] = [];
-      }
-      callbacks[event]?.push(callback);
-      return busboyInstance;
-    },
-    emit: <K extends keyof MockBusboyEvents>(event: K, ...args: Parameters<MockBusboyEvents[K]>) => {
-      callbacks[event]?.forEach(cb => {
-        (cb as (...args: Parameters<MockBusboyEvents[K]>) => void)(...args);
-      });
-    },
-  };
-  return busboyInstance;
-};
-
-jest.mock('busboy', () => {
-  return jest.fn().mockImplementation(() => createMockBusboy());
-});
-
-describe('Songs API', () => {
-  let mockReq: Partial<NextApiRequest>;
-  let mockRes: Partial<NextApiResponse>;
-
-  beforeEach(() => {
-    mockReq = {
-      method: 'GET',
-      query: {},
-      body: {},
-      pipe: jest.fn(),
-    };
-    mockRes = {
-      status: jest.fn().mockReturnThis(),
-      json: jest.fn(),
-    };
-    jest.clearAllMocks();
-  });
-
-  describe('GET /api/songs', () => {
-    it('should return all songs', async () => {
-      const mockSongs = [{ id: 1, title: 'Test Song' }];
-      (db.prepare('').all as jest.Mock).mockReturnValue(mockSongs);
-
-      await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(db.prepare).toHaveBeenCalledWith('SELECT id, title, artist, album, duration, file_path FROM Songs');
-      expect(mockRes.status).toHaveBeenCalledWith(HttpStatus.OK);
-      expect(mockRes.json).toHaveBeenCalledWith(mockSongs);
-    });
-  });
-
-  describe('POST /api/songs', () => {
-    it('should create a new song', async () => {
-      jest.setTimeout(10000); // Increase timeout to 10 seconds
-
-      mockReq.method = 'POST';
-      mockReq.headers = { 'content-type': 'multipart/form-data; boundary=---boundary' };
-
-      (db.prepare('').run as jest.Mock).mockReturnValue({ lastInsertRowid: 1 });
-
-      const mockBusboy = createMockBusboy();
-      jest.mocked(busboy).mockReturnValue(mockBusboy as unknown as busboy.Busboy);
-
-      const { PassThrough } = jest.requireActual('stream');
-      // Create a PassThrough stream for the file
-      const mockFileStream = new PassThrough();
-
-      // Emit the 'file' event with the mock file stream
-      process.nextTick(() => {
-        mockBusboy.emit('file', 'file', mockFileStream, { filename: 'test.mp3', encoding: '7bit', mimeType: 'audio/mpeg' });
-        mockBusboy.emit('field', 'title', 'Test Song', { nameTruncated: false, valueTruncated: false, encoding: '7bit', mimeType: 'text/plain' });
-        mockBusboy.emit('field', 'artist', 'Test Artist', { nameTruncated: false, valueTruncated: false, encoding: '7bit', mimeType: 'text/plain' });
-        mockBusboy.emit('field', 'album', 'Test Album', { nameTruncated: false, valueTruncated: false, encoding: '7bit', mimeType: 'text/plain' });
-        mockBusboy.emit('field', 'duration', '3:30', { nameTruncated: false, valueTruncated: false, encoding: '7bit', mimeType: 'text/plain' });
-        mockBusboy.emit('finish');
-        mockBusboy.emit('close'); // Emit 'close' to resolve the handler's promise
-        mockFileStream.end(); // Signal the end of the file stream
-      });
-
-      await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(db.prepare).toHaveBeenCalledWith('INSERT INTO Songs (title, artist, album, duration, file_path) VALUES (?, ?, ?, ?, ?)');
-      expect(mockRes.status).toHaveBeenCalledWith(HttpStatus.CREATED);
-      expect(mockRes.json).toHaveBeenCalledWith(expect.objectContaining({
-        id: 1,
-        title: 'Test Song',
-        artist: 'Test Artist',
-        album: 'Test Album',
-        duration: '3:30',
-      }));
-    });
-
-    it('should return 400 when required fields are missing', async () => {
-      jest.setTimeout(10000); // Increase timeout to 10 seconds
-
-      mockReq.method = 'POST';
-      mockReq.headers = { 'content-type': 'multipart/form-data; boundary=---boundary' };
-
-      const mockBusboy = createMockBusboy();
-      jest.mocked(busboy).mockReturnValue(mockBusboy as unknown as busboy.Busboy);
-
-      process.nextTick(() => {
-        mockBusboy.emit('finish');
-        mockBusboy.emit('close'); // Emit 'close' to resolve the handler's promise
-      });
-
-      await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(mockRes.status).toHaveBeenCalledWith(HttpStatus.BAD_REQUEST);
-      expect(mockRes.json).toHaveBeenCalledWith({ status: 'error', message: 'Missing required fields' });
-    });
-  });
-
-  describe('PUT /api/songs', () => {
-    it('should update a song', async () => {
-      mockReq.method = 'PUT';
-      mockReq.query = { id: '1' };
-      mockReq.body = { title: 'Updated Song', artist: 'Updated Artist', album: 'Updated Album', duration: '4:00' };
-      (db.prepare('').run as jest.Mock).mockReturnValue({ changes: 1 });
-
-      await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(db.prepare).toHaveBeenCalledWith('UPDATE Songs SET title = ?, artist = ?, album = ?, duration = ? WHERE id = ?');
-      expect(mockRes.status).toHaveBeenCalledWith(HttpStatus.OK);
-      expect(mockRes.json).toHaveBeenCalledWith({ message: 'Song updated successfully' });
-    });
-
-    it('should return 404 when updating non-existent song', async () => {
-      mockReq.method = 'PUT';
-      mockReq.query = { id: '999' };
-      mockReq.body = { title: 'Updated Song', artist: 'Updated Artist', album: 'Updated Album', duration: '4:00' };
-      (db.prepare('').run as jest.Mock).mockReturnValue({ changes: 0 });
-
-      await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(mockRes.status).toHaveBeenCalledWith(HttpStatus.NOT_FOUND);
-      expect(mockRes.json).toHaveBeenCalledWith({ status: 'error', message: 'Song not found' });
-    });
-  });
-
-  describe('DELETE /api/songs', () => {
-    it('should delete a song', async () => {
-      mockReq.method = 'DELETE';
-      mockReq.query = { id: '1' };
-      (db.prepare('').run as jest.Mock).mockReturnValue({ changes: 1 });
-
-      await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(db.prepare).toHaveBeenCalledWith('DELETE FROM Songs WHERE id = ?');
-      expect(mockRes.status).toHaveBeenCalledWith(HttpStatus.OK);
-      expect(mockRes.json).toHaveBeenCalledWith({ message: 'Song deleted successfully' });
-    });
-
-    it('should return 404 when deleting non-existent song', async () => {
-      mockReq.method = 'DELETE';
-      mockReq.query = { id: '999' };
-      (db.prepare('').run as jest.Mock).mockReturnValue({ changes: 0 });
-
-      await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(mockRes.status).toHaveBeenCalledWith(HttpStatus.NOT_FOUND);
-      expect(mockRes.json).toHaveBeenCalledWith({ status: 'error', message: 'Song not found' });
-    });
-  });
-});
diff --git a/apps/music-player/src/pages/api/songs.ts b/apps/music-player/src/pages/api/songs.ts
deleted file mode 100644
index c67ebcd..0000000
--- a/apps/music-player/src/pages/api/songs.ts
+++ /dev/null
@@ -1,153 +0,0 @@
-import { NextApiRequest, NextApiResponse } from 'next';
-import db from '../../lib/db/db';
-import { withAuth } from '../../lib/auth';
-import { asyncHandler, AppError, logInfo, logError } from '../../lib/errorHandler';
-import fs from 'fs';
-import path from 'path';
-import busboy from 'busboy';
-
-export const config = {
-  api: {
-    bodyParser: false,
-  },
-};
-
-const handler = asyncHandler(async (req: NextApiRequest, res: NextApiResponse) => {
-  switch (req.method) {
-    case 'GET':
-      return getSongs(req, res);
-    case 'POST':
-      return createSong(req, res);
-    case 'PUT':
-      return updateSong(req, res);
-    case 'DELETE':
-      return deleteSong(req, res);
-    default:
-      throw new AppError('Method not allowed', 405);
-  }
-});
-
-const getSongs = asyncHandler(async (req: NextApiRequest, res: NextApiResponse) => {
-  const songs = db.prepare('SELECT id, title, artist, album, duration, file_path FROM Songs').all();
-  logInfo('Retrieved all songs', { count: songs.length });
-  res.status(200).json(songs);
-});
-
-const createSong = asyncHandler(async (req: NextApiRequest, res: NextApiResponse) => {
-  const bb = busboy({ headers: req.headers });
-  const uploadDir = path.join(process.cwd(), 'public/uploads');
-  let uploadedFile: string | null = null;
-  let title: string | null = null;
-  let artist: string | null = null;
-  let album: string | null = null;
-  let duration: string | null = null;
-
-  bb.on('file', (name: string, file: NodeJS.ReadableStream, info: busboy.FileInfo) => {
-    const filename = info.filename;
-    const filePath = path.join(uploadDir, filename);
-    const writeStream = fs.createWriteStream(filePath);
-
-    file.pipe(writeStream);
-
-    file.on('end', () => {
-      uploadedFile = filePath;
-      logInfo('File uploaded', { filename, filePath });
-    });
-  });
-
-  bb.on('field', (name: string, val: string) => {
-    switch (name) {
-      case 'title':
-        title = val;
-        break;
-      case 'artist':
-        artist = val;
-        break;
-      case 'album':
-        album = val;
-        break;
-      case 'duration':
-        duration = val;
-        break;
-    }
-  });
-
-  await new Promise((resolve, reject) => {
-    bb.on('close', resolve);
-    bb.on('error', (err) => {
-      logError('Error during file upload', { error: err });
-      reject(err);
-    });
-    req.pipe(bb);
-  });
-
-  if (!uploadedFile || !title || !artist || !duration) {
-    logError('Missing required fields for song creation', { uploadedFile, title, artist, duration });
-    throw new AppError('Missing required fields', 400);
-  }
-
-  const result = db.prepare('INSERT INTO Songs (title, artist, album, duration, file_path) VALUES (?, ?, ?, ?, ?)').run(
-    title,
-    artist,
-    album,
-    duration,
-    `/uploads/${path.basename(uploadedFile)}`
-  );
-
-  logInfo('Song created', { id: result.lastInsertRowid, title, artist });
-  res.status(201).json({
-    id: result.lastInsertRowid,
-    title,
-    artist,
-    album,
-    duration,
-    file_path: `/uploads/${path.basename(uploadedFile)}`,
-  });
-});
-
-const updateSong = asyncHandler(async (req: NextApiRequest, res: NextApiResponse) => {
-  const { id } = req.query;
-  const { title, artist, album, duration } = req.body;
-
-  if (!id || typeof id !== 'string') {
-    logError('Invalid song ID for update', { id });
-    throw new AppError('Invalid song ID', 400);
-  }
-
-  const result = db.prepare('UPDATE Songs SET title = ?, artist = ?, album = ?, duration = ? WHERE id = ?').run(
-    title,
-    artist,
-    album,
-    duration,
-    id
-  );
-
-  if (result.changes === 0) {
-    logError('Attempt to update non-existent song', { id });
-    throw new AppError('Song not found', 404);
-  }
-
-  logInfo('Song updated', { id, title, artist });
-  res.status(200).json({ message: 'Song updated successfully' });
-});
-
-const deleteSong = asyncHandler(async (req: NextApiRequest, res: NextApiResponse) => {
-  const { id } = req.query;
-
-  if (!id || typeof id !== 'string') {
-    logError('Invalid song ID for deletion', { id });
-    throw new AppError('Invalid song ID', 400);
-  }
-
-  const result = db.prepare('DELETE FROM Songs WHERE id = ?').run(id);
-
-  if (result.changes === 0) {
-    logError('Attempt to delete non-existent song', { id });
-    throw new AppError('Song not found', 404);
-  }
-
-  logInfo('Song deleted', { id });
-  res.status(200).json({ message: 'Song deleted successfully' });
-});
-
-export default withAuth(handler);
\ No newline at end of file
diff --git a/apps/music-player/src/pages/api/upload.spec.ts b/apps/music-player/src/pages/api/upload.spec.ts
deleted file mode 100644
index 249674d..0000000
--- a/apps/music-player/src/pages/api/upload.spec.ts
+++ /dev/null
@@ -1,212 +0,0 @@
-// src/pages/api/upload.spec.ts
-
-import { NextApiRequest, NextApiResponse } from 'next';
-import handler from './upload';
-import fs from 'fs';
-import path from 'path';
-import { PassThrough } from 'stream';
-import busboy from 'busboy';
-
-// Mocking 'fs' using EventEmitter for accurate event handling
-jest.mock('fs', () => {
-  // Use require within the factory to access EventEmitter
-  // eslint-disable-next-line @typescript-eslint/no-require-imports
-  const { EventEmitter } = require('events');
-
-  return {
-    createWriteStream: jest.fn(() => {
-      const emitter = new EventEmitter();
-      return {
-        on: emitter.on.bind(emitter),
-        write: jest.fn(),
-        end: jest.fn(() => {
-          // Simulate the 'finish' event when end is called
-          emitter.emit('finish');
-        }),
-        emit: emitter.emit.bind(emitter),
-      };
-    }),
-  };
-});
-
-// Mocking 'path' module with import syntax
-jest.mock('path', () => ({
-  join: jest.fn((...args: string[]) => args.join('/')),
-  basename: jest.fn((file: string) => file.split('/').pop()),
-}));
-
-// Mocking 'busboy' using EventEmitter for accurate event handling
-jest.mock('busboy', () => {
-  // Use require within the factory to access EventEmitter
-  // eslint-disable-next-line @typescript-eslint/no-require-imports
-  const { EventEmitter } = require('events');
-
-  // Updated to accept 'config' parameter
-  // eslint-disable-next-line @typescript-eslint/no-explicit-any
-  return jest.fn().mockImplementation((config: any) => { // Accept 'config' as a parameter
-    const emitter = new EventEmitter();
-    return {
-      on: emitter.on.bind(emitter),
-      emit: emitter.emit.bind(emitter),
-      pipe: jest.fn(),
-    };
-  });
-});
-
-describe('Upload API', () => {
-  let mockReq: Partial<NextApiRequest>;
-  let mockRes: Partial<NextApiResponse>;
-  let consoleErrorSpy: jest.SpyInstance;
-
-  beforeEach(() => {
-    mockReq = {
-      method: 'POST',
-      headers: { 'content-type': 'multipart/form-data' },
-      pipe: jest.fn(),
-    };
-    mockRes = {
-      status: jest.fn().mockReturnThis(),
-      json: jest.fn(),
-    };
-    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => { /* no-op */ });
-    jest.clearAllMocks();
-    // Mock process.cwd()
-    jest.spyOn(process, 'cwd').mockReturnValue('/Users/alm/WebstormProjects/music-player/apps/music-player');
-  });
-
-  afterEach(() => {
-    consoleErrorSpy.mockRestore();
-  });
-
-  it('should return 405 for non-POST requests', async () => {
-    mockReq.method = 'GET';
-    await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-    expect(mockRes.status).toHaveBeenCalledWith(405);
-    expect(mockRes.json).toHaveBeenCalledWith({ error: 'Method not allowed' });
-  });
-
-  it('should handle file upload successfully', async () => {
-    const mockFile = {
-      filename: 'test_song.mp3',
-      encoding: '7bit',
-      mimetype: 'audio/mpeg',
-    };
-
-    // Create a mockReadStream using PassThrough for controlled event emission
-    const mockReadStream = new PassThrough();
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    mockReadStream.write = jest.fn().mockImplementation((chunk: any) => {
-      mockReadStream.emit('data', chunk);
-      return true;
-    });
-    mockReadStream.end = jest.fn().mockImplementation(() => {
-      mockReadStream.emit('end');
-    });
-
-    // Pipe method: simulate writing data and ending the stream
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    mockReadStream.pipe = jest.fn().mockImplementation((writeStream: any) => {
-      writeStream.write('file content');
-      // Emit 'end' event before ending writeStream
-      mockReadStream.emit('end');
-      writeStream.end(); // emits 'finish'
-    });
-
-    const bbInstance = busboy({ headers: mockReq.headers }); // Ensure busboy is called with config
-
-    (busboy as jest.Mock).mockReturnValue(bbInstance);
-
-    const handlerPromise = handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-    // Simulate the 'file' and 'finish' events
-    bbInstance.emit('file', 'file', mockReadStream, mockFile);
-    bbInstance.emit('finish');
-
-    await handlerPromise;
-
-    const expectedFilePath = path.join(process.cwd(), 'public/uploads', 'test_song.mp3');
-
-    expect(fs.createWriteStream).toHaveBeenCalledWith(expectedFilePath);
-    expect(mockRes.status).toHaveBeenCalledWith(200);
-    expect(mockRes.json).toHaveBeenCalledWith({
-      message: 'File uploaded successfully',
-      filePath: '/uploads/test_song.mp3',
-    });
-  });
-
-  it('should handle errors during file upload', async () => {
-    const bbInstance = busboy({ headers: mockReq.headers }); // Ensure busboy is called with config
-
-    (busboy as jest.Mock).mockReturnValue(bbInstance);
-
-    const handlerPromise = handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-    // Simulate an error during form parsing
-    bbInstance.emit('error', new Error('Upload error'));
-
-    await handlerPromise;
-
-    expect(consoleErrorSpy).toHaveBeenCalledWith('Error parsing form:', expect.any(Error));
-    expect(mockRes.status).toHaveBeenCalledWith(500);
-    expect(mockRes.json).toHaveBeenCalledWith({ error: 'Error uploading file' });
-  });
-
-  it('should handle missing file in upload', async () => {
-    const bbInstance = busboy({ headers: mockReq.headers }); // Ensure busboy is called with config
-
-    (busboy as jest.Mock).mockReturnValue(bbInstance);
-
-    const handlerPromise = handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-    // Simulate 'finish' event without any 'file' events
-    bbInstance.emit('finish');
-
-    await handlerPromise;
-
-    expect(mockRes.status).toHaveBeenCalledWith(400);
-    expect(mockRes.json).toHaveBeenCalledWith({ error: 'No file uploaded' });
-  });
-
-  it('should handle errors during file saving', async () => {
-    const mockFile = {
-      filename: 'test_song.mp3',
-      encoding: '7bit',
-      mimetype: 'audio/mpeg',
-    };
-
-    // Create a mockReadStream using PassThrough
-    const mockReadStream = new PassThrough();
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    mockReadStream.write = jest.fn().mockImplementation((chunk: any) => {
-      mockReadStream.emit('data', chunk);
-      return true;
-    });
-    mockReadStream.end = jest.fn().mockImplementation(() => {
-      mockReadStream.emit('end');
-    });
-
-    // Pipe method: simulate writing data and triggering an error
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    mockReadStream.pipe = jest.fn().mockImplementation((writeStream: any) => {
-      writeStream.write('file content');
-      // Emit 'error' on writeStream to simulate write error
-      writeStream.emit('error', new Error('Write error'));
-    });
-
-    const bbInstance = busboy({ headers: mockReq.headers }); // Ensure busboy is called with config
-
-    (busboy as jest.Mock).mockReturnValue(bbInstance);
-
-    const handlerPromise = handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-    // Simulate the 'file' and 'finish' events
-    bbInstance.emit('file', 'file', mockReadStream, mockFile);
-    bbInstance.emit('finish');
-
-    await handlerPromise;
-
-    expect(consoleErrorSpy).toHaveBeenCalledWith('Error saving file:', expect.any(Error));
-    expect(mockRes.status).toHaveBeenCalledWith(500);
-    expect(mockRes.json).toHaveBeenCalledWith({ error: 'Error saving file' });
-  });
-});
diff --git a/apps/music-player/src/pages/api/upload.ts b/apps/music-player/src/pages/api/upload.ts
deleted file mode 100644
index 0c8fcd2..0000000
--- a/apps/music-player/src/pages/api/upload.ts
+++ /dev/null
@@ -1,71 +0,0 @@
-// src/pages/api/upload.ts
-
-import { NextApiRequest, NextApiResponse } from 'next';
-import busboy from 'busboy';
-import fs from 'fs';
-import path from 'path';
-
-export const config = {
-  api: {
-    bodyParser: false,
-  },
-};
-
-export default async function handler(req: NextApiRequest, res: NextApiResponse) {
-  return new Promise<void>((resolve) => { // Removed 'reject' to prevent unhandled rejections
-    if (req.method !== 'POST') {
-      res.status(405).json({ error: 'Method not allowed' });
-      return resolve();
-    }
-
-    const bb = busboy({ headers: req.headers });
-    const uploadDir = path.join(process.cwd(), 'public/uploads');
-
-    let uploadedFile: string | null = null;
-    let fileError: Error | null = null;
-
-    bb.on('file', (name: string, file: NodeJS.ReadableStream, info: busboy.FileInfo) => {
-      const filename = info.filename;
-      const filePath = path.join(uploadDir, filename);
-      const writeStream = fs.createWriteStream(filePath);
-
-      // Attach error handler before piping
-      writeStream.on('error', (err) => {
-        fileError = err;
-      });
-
-      file.on('end', () => {
-        uploadedFile = filePath;
-      });
-
-      file.pipe(writeStream);
-    });
-
-    bb.on('finish', () => {
-      if (fileError) {
-        console.error('Error saving file:', fileError);
-        res.status(500).json({ error: 'Error saving file' });
-        return resolve();
-      }
-
-      if (!uploadedFile) {
-        res.status(400).json({ error: 'No file uploaded' });
-        return resolve();
-      }
-
-      res.status(200).json({
-        message: 'File uploaded successfully',
-        filePath: `/uploads/${path.basename(uploadedFile)}`,
-      });
-      return resolve();
-    });
-
-    bb.on('error', (err: Error) => { // Changed to resolve instead of reject
-      console.error('Error parsing form:', err);
-      res.status(500).json({ error: 'Error uploading file' });
-      return resolve(); // Prevent unhandled promise rejection
-    });
-
-    req.pipe(bb);
-  });
-}
diff --git a/apps/music-player/src/pages/api/users.spec.ts b/apps/music-player/src/pages/api/users.spec.ts
deleted file mode 100644
index 67220c7..0000000
--- a/apps/music-player/src/pages/api/users.spec.ts
+++ /dev/null
@@ -1,175 +0,0 @@
-import { NextApiRequest, NextApiResponse } from 'next';
-import handler from './users';
-import db from '../../lib/db/db';
-import { User } from '../../lib/auth';
-
-jest.mock('../../lib/db/db', () => ({
-  prepare: jest.fn().mockReturnThis(),
-  all: jest.fn(),
-  run: jest.fn(),
-  get: jest.fn(),
-}));
-
-jest.mock('../../lib/auth', () => ({
-  withAuth: (handler: (req: NextApiRequest, res: NextApiResponse, user: User) => Promise<void>) => 
-    (req: NextApiRequest, res: NextApiResponse) => 
-      handler(req, res, { id: 1, username: 'testuser', email: 'test@example.com' }),
-  authenticateUser: jest.fn(),
-  generateToken: jest.fn(),
-}));
-
-const HTTP_STATUS = {
-  OK: 200,
-  CREATED: 201,
-  NOT_FOUND: 404,
-  METHOD_NOT_ALLOWED: 405,
-  BAD_REQUEST: 400,
-  UNAUTHORIZED: 401,
-  FORBIDDEN: 403,
-};
-
-describe('Users API', () => {
-  let mockReq: Partial<NextApiRequest>;
-  let mockRes: Partial<NextApiResponse>;
-
-  beforeEach(() => {
-    mockReq = {
-      method: '',
-      query: {},
-      body: {},
-      headers: {},
-    };
-    mockRes = {
-      status: jest.fn().mockReturnThis(),
-      json: jest.fn(),
-      end: jest.fn(),
-      setHeader: jest.fn(),
-    };
-    jest.clearAllMocks();
-  });
-
-  describe('GET /api/users', () => {
-    it('should get all users', async () => {
-      const mockUsers = [
-        { id: 1, username: 'user1', email: 'user1@example.com' },
-        { id: 2, username: 'user2', email: 'user2@example.com' },
-      ];
-      (db.prepare('').all as jest.Mock).mockReturnValueOnce(mockUsers);
-
-      mockReq.method = 'GET';
-      await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(db.prepare).toHaveBeenCalledWith('SELECT id, username, email FROM Users');
-      expect(db.prepare('').all).toHaveBeenCalled();
-      expect(mockRes.status).toHaveBeenCalledWith(HTTP_STATUS.OK);
-      expect(mockRes.json).toHaveBeenCalledWith(mockUsers);
-    });
-  });
-
-  describe('POST /api/users', () => {
-    it('should create a new user', async () => {
-      const newUser = { username: 'newuser', email: 'newuser@example.com', password: 'password123' };
-      (db.prepare('').run as jest.Mock).mockReturnValueOnce({ lastInsertRowid: 3 });
-
-      mockReq.method = 'POST';
-      mockReq.body = newUser;
-      await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(db.prepare).toHaveBeenCalledWith('INSERT INTO Users (username, email, password_hash) VALUES (?, ?, ?)');
-      expect(db.prepare('').run).toHaveBeenCalledWith(newUser.username, newUser.email, newUser.password);
-      expect(mockRes.status).toHaveBeenCalledWith(HTTP_STATUS.CREATED);
-      expect(mockRes.json).toHaveBeenCalledWith({
-        id: 3,
-        username: newUser.username,
-        email: newUser.email,
-      });
-    });
-  });
-
-  describe('PUT /api/users', () => {
-    it('should update an existing user', async () => {
-      const updatedUser = { username: 'updateduser', email: 'updated@example.com' };
-      (db.prepare('').get as jest.Mock).mockReturnValueOnce({ id: 1 });
-      (db.prepare('').run as jest.Mock).mockReturnValueOnce({ changes: 1 });
-
-      mockReq.method = 'PUT';
-      mockReq.query = { id: '1' };
-      mockReq.body = updatedUser;
-      await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(db.prepare).toHaveBeenCalledWith('SELECT id FROM Users WHERE id = ?');
-      expect(db.prepare).toHaveBeenCalledWith(expect.stringContaining('UPDATE Users SET'));
-      expect(db.prepare('').run).toHaveBeenCalled();
-      expect(mockRes.status).toHaveBeenCalledWith(HTTP_STATUS.OK);
-      expect(mockRes.json).toHaveBeenCalledWith({ message: 'User updated successfully' });
-    });
-
-    it('should return 404 when updating non-existent user', async () => {
-      (db.prepare('').get as jest.Mock).mockReturnValueOnce(null);
-
-      mockReq.method = 'PUT';
-      mockReq.query = { id: '1' };
-      mockReq.body = { username: 'nonexistent' };
-      await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(mockRes.status).toHaveBeenCalledWith(HTTP_STATUS.NOT_FOUND);
-      expect(mockRes.json).toHaveBeenCalledWith({ error: 'User not found' });
-    });
-
-    it('should return 403 when updating a different user', async () => {
-      mockReq.method = 'PUT';
-      mockReq.query = { id: '2' };
-      mockReq.body = { username: 'differentuser' };
-      await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(mockRes.status).toHaveBeenCalledWith(HTTP_STATUS.FORBIDDEN);
-      expect(mockRes.json).toHaveBeenCalledWith({ error: 'Not authorized to update this user' });
-    });
-  });
-
-  describe('DELETE /api/users', () => {
-    it('should delete a user', async () => {
-      (db.prepare('').get as jest.Mock).mockReturnValueOnce({ id: 1 });
-      (db.prepare('').run as jest.Mock).mockReturnValueOnce({ changes: 1 });
-
-      mockReq.method = 'DELETE';
-      mockReq.query = { id: '1' };
-      await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(db.prepare).toHaveBeenCalledWith('SELECT id FROM Users WHERE id = ?');
-      expect(db.prepare).toHaveBeenCalledWith('DELETE FROM Users WHERE id = ?');
-      expect(db.prepare('').run).toHaveBeenCalledWith('1');
-      expect(mockRes.status).toHaveBeenCalledWith(HTTP_STATUS.OK);
-      expect(mockRes.json).toHaveBeenCalledWith({ message: 'User deleted successfully' });
-    });
-
-    it('should return 404 when deleting non-existent user', async () => {
-      (db.prepare('').get as jest.Mock).mockReturnValueOnce(null);
-
-      mockReq.method = 'DELETE';
-      mockReq.query = { id: '1' };
-      await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(mockRes.status).toHaveBeenCalledWith(HTTP_STATUS.NOT_FOUND);
-      expect(mockRes.json).toHaveBeenCalledWith({ error: 'User not found' });
-    });
-
-    it('should return 403 when deleting a different user', async () => {
-      mockReq.method = 'DELETE';
-      mockReq.query = { id: '2' };
-      await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-      expect(mockRes.status).toHaveBeenCalledWith(HTTP_STATUS.FORBIDDEN);
-      expect(mockRes.json).toHaveBeenCalledWith({ error: 'Not authorized to delete this user' });
-    });
-  });
-
-  it('should return 405 for invalid request method', async () => {
-    mockReq.method = 'PATCH';
-    await handler(mockReq as NextApiRequest, mockRes as NextApiResponse);
-
-    expect(mockRes.setHeader).toHaveBeenCalledWith('Allow', ['GET', 'POST', 'PUT', 'DELETE']);
-    expect(mockRes.status).toHaveBeenCalledWith(HTTP_STATUS.METHOD_NOT_ALLOWED);
-    expect(mockRes.end).toHaveBeenCalledWith('Method PATCH Not Allowed');
-  });
-});